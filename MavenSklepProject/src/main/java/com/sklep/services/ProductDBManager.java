package com.sklep.services;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.sklep.project.Client;
import com.sklep.project.Product;
import com.sklep.project.ProductMarks;

public class ProductDBManager {

	private Connection conn;
	private Statement stmt;
	private PreparedStatement addProductStmt;
	private PreparedStatement getProductStmt;
	private PreparedStatement dropProductStmt;
	private PreparedStatement deleteAllProductsStmt;
	private PreparedStatement findProductByNameStmt;
	private PreparedStatement findProductByCodeStmt;
	private PreparedStatement findProductByPriceStmt;
	
	
	
	public ProductDBManager() throws java.sql.SQLException, SQLException
	{
	
	
	boolean productTableExists=false;
	conn= DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");

	
	ResultSet rs= conn.getMetaData().getTables(null, null,null, null);
	stmt=conn.createStatement();
	
	while(rs.next()){
		if("Product".equalsIgnoreCase(rs.getString("TABLE_NAME")))
		{productTableExists=true;
		break;
		}
		}
	
	
	
	if(!productTableExists)
	{
		
	
		stmt.executeUpdate("" +
				"CREATE TABLE product(" +
				"id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
				"name varchar(20)," +
				"price double," +
				"code float," +
				"" +
				")");
			
	}
	
	addProductStmt=conn.prepareStatement("" +
			"INSERT INTO Product (name,price,code) VALUES (?,?,?)" +
			"");
		
	getProductStmt=conn.prepareStatement("" +
			"SELECT * FROM Product" +
			"");
	
	dropProductStmt=conn.prepareStatement("" +
			"DROP TABLE Product" +
			"");
	
	deleteAllProductsStmt = conn.prepareStatement("DELETE FROM Product");
	
	findProductByNameStmt = conn.prepareStatement("SELECT id FROM Product WHERE name = ?");
	
	findProductByCodeStmt = conn.prepareStatement("SELECT id FROM Product WHERE code = ?");
	
	findProductByPriceStmt = conn.prepareStatement("SELECT id FROM Product WHERE price = ?");
	
	}
	
	
	public void addProduct(Product p) throws java.sql.SQLException, SQLException
	{
		addProductStmt.setString(1, p.getName().toString());
		addProductStmt.setDouble(2, p.getPrice());
		addProductStmt.setFloat(3, p.getCode());
		addProductStmt.executeUpdate();

	}
	
	
	public void droptableproduct() throws java.sql.SQLException{
		
		dropProductStmt.executeUpdate();
	}
	
	
	public List<Integer> findProductByName(String name) throws java.sql.SQLException
	{
		try 
		{
			List<Integer> result = new ArrayList<Integer>();
			findProductByNameStmt.setString(1, name);
			ResultSet rs = findProductByNameStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} 
		catch (java.sql.SQLException e) 
		{
			e.printStackTrace();
		}
		return null;
	}
	
	
	public List<Integer> findGameByType(float code) throws java.sql.SQLException
	{
		try 
		{
			List<Integer> result = new ArrayList<Integer>();
			findProductByCodeStmt.setFloat(1, code);
			ResultSet rs = findProductByNameStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} 
		catch (java.sql.SQLException e) 
		{
			e.printStackTrace();
		}
		return null;
	}
	
	
	public List<Product> getAllGames() throws java.sql.SQLException 
	{
		List<Product> products = new ArrayList<Product>();
		try 
		{
			ResultSet rs = getProductStmt.executeQuery();
			while (rs.next()) 
			{


				products.add(new Product(rs.getString("name"),rs.getDouble("price")));
			}

		} 
		catch (java.sql.SQLException e) 
		{
			e.printStackTrace();
		}
		return products;
	}
	
	
	
	
	
	
	
	
	
}
